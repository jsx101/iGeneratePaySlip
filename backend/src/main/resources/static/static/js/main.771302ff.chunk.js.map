{"version":3,"sources":["Components/EmployeeDetailForm.js","Components/PaySlipDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","EmployeeDetailForm","sendDataToParent","useState","firstname","lastname","annualSalary","paymentMonth","superRate","formData","setFormData","handleChange","e","newData","target","id","value","Container","Form","onSubmit","preventDefault","post","then","res","data","handleSubmit","FormGroup","Label","for","Input","type","name","onChange","required","min","step","PaySlipData","backToFormFunction","employee","grossIncome","incomeTax","netIncome","superannuation","paymentStartDate","paymentEndDate","onClick","App","paySlipData","setPaySlipData","console","log","resetPaySlipDataToNull","display","setDisplay","useEffect","PaySlipDisplay","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.771302ff.chunk.js","sourcesContent":["import { Container, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { useState } from 'react';\r\n\r\nconst axios = require('axios');\r\n\r\nfunction EmployeeDetailForm({sendDataToParent}) {\r\n    const [ formData, setFormData ] = useState({\r\n        firstname: '',\r\n        lastname: '',\r\n        annualSalary: '',\r\n        paymentMonth: '',\r\n        superRate: ''\r\n    })\r\n    var handleChange = (e) => {\r\n        const newData = {...formData};\r\n        newData[e.target.id] = e.target.value;\r\n        setFormData(newData);\r\n    }\r\n\r\n    var handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        formData.superRate = formData.superRate/100;\r\n        axios.post('/api/generate/pay-slip', formData)\r\n            .then(res => {\r\n                setFormData({\r\n                    firstname: '',\r\n                    lastname: '',\r\n                    annualSalary: '',\r\n                    paymentMonth: '',\r\n                    superRate: ''\r\n                })\r\n                sendDataToParent(res.data);\r\n            });\r\n    }\r\n\r\n    return <Container>\r\n        <h2>Fill in employee details</h2>\r\n        <Form onSubmit={(e) => handleSubmit(e)}>\r\n            <FormGroup>\r\n                <Label for='firstname'>First name</Label>\r\n                <Input type='text' name='firstname' id='firstname' onChange={(e) => handleChange(e)} value={formData.firstname} required='required' />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for='lastname'>Last name</Label>\r\n                <Input type='text' name='lastname' id='lastname' onChange={(e) => handleChange(e)} value={formData.lastname} required='required' />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for='annualSalary' min='0'>Annual Salary ($)</Label>\r\n                <Input type='number' name='annualSalary' id='annualSalary' onChange={(e) => handleChange(e)} value={formData.annualSalary} required='required' />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for='paymentMonth'>Payment month</Label>\r\n                <select name='paymentMonth' id='paymentMonth' onChange={(e) => handleChange(e)} value={formData.paymentMonth} required='required'>\r\n                    <option value=''>SELECT</option>\r\n                    <option value='0'>January</option>\r\n                    <option value='1'>February</option>\r\n                    <option value='2'>March</option>\r\n                    <option value='3'>April</option>\r\n                    <option value='4'>May</option>\r\n                    <option value='5'>June</option>\r\n                    <option value='6'>July</option>\r\n                    <option value='7'>August</option>\r\n                    <option value='8'>September</option>\r\n                    <option value='9'>October</option>\r\n                    <option value='10'>November</option>\r\n                    <option value='11'>December</option>\r\n                </select>\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for='superRate'>Superannuation rate (%)</Label>\r\n                <Input type='' name='superRate' id='superRate' min='0' step='0.1' onChange={(e) => handleChange(e)} value={formData.superRate} required='required' />\r\n            </FormGroup>\r\n            <Input type='submit' value='Generate' />\r\n            <Input type='reset' value='Clear' />\r\n        </Form>\r\n    </Container>\r\n}\r\n\r\nexport default EmployeeDetailForm;","function PaySlipData({ data, backToFormFunction }) {\r\n    const { employee, grossIncome, incomeTax, netIncome, superannuation, paymentStartDate, paymentEndDate } = data;\r\n    const { firstname, lastname, superRate } = employee;\r\n    return <div data-testid=\"pay-slip-data\">\r\n        <div>\r\n            Employee's name: {firstname + ' ' + lastname}\r\n        </div>\r\n        <div>\r\n            Pay period: {paymentStartDate + ' â€” ' + paymentEndDate}\r\n        </div>\r\n        <div>\r\n            Net income: ${netIncome}\r\n        </div>\r\n        <div>\r\n            Gross income: ${grossIncome}\r\n        </div>\r\n        <div>\r\n            Income tax: ${incomeTax}\r\n        </div>\r\n        <div>\r\n            Superannuation: ${superannuation + ` (${superRate*100}%)`}\r\n        </div>\r\n\r\n        <button data-testid='paySlipDisplay-back-button' onClick={()=>{backToFormFunction()}}>Back</button>\r\n    </div>\r\n}\r\n\r\nexport default PaySlipData;","import { useState, useEffect } from 'react';\n\nimport './App.css';\nimport EmployeeDetailForm from './Components/EmployeeDetailForm';\nimport PaySlipDisplay from './Components/PaySlipDisplay';\n\nfunction App() {\n\n  const [ paySlipData, setPaySlipData ] = useState(null);\n  const sendDataToParent = (data) => {\n    setPaySlipData(data);\n    console.log(\"Pay slip generated\");\n  }\n\n  const resetPaySlipDataToNull = () => {\n    setPaySlipData(null);\n    console.log(\"Back to the form\")\n  }\n\n  const [ display, setDisplay ] = useState(<EmployeeDetailForm sendDataToParent={sendDataToParent} />);\n  useEffect(() => {\n    setDisplay(paySlipData ? \n      <PaySlipDisplay data={paySlipData} backToFormFunction={resetPaySlipDataToNull} /> : \n      <EmployeeDetailForm sendDataToParent={sendDataToParent} />)\n  }, [paySlipData]);\n\n  return (\n    <div data-testid='app' className=\"App\">\n      {display}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}